var globalParams = {};

(function () {
    'use strict';

    function parseParams(data) {
        return data.split(' ')[1].split('&').reduce((acc, current) => {
            const [key, value] = current.split('=');
            const numValue = Number(value);
            if (!isNaN(numValue)) {
                acc[key] = numValue;
            } else {
                acc[key] = value;
            }
            return acc;
        }, {});
    }

    function requestData(url, callback) {
        GM_xmlhttpRequest({
            method: 'GET',
            url: url,
            onload: callback,
            onerror: function (err) {
                console.error('请求失败：', err);
                let button = document.createElement("button");
                button.innerText = "温馨提示：服务启动失败，请检查本地web服务是否启动，防止尝试破解，本界面将在3秒后关闭";
                button.style.position = "fixed";
                button.style.left = "50%";
                button.style.top = "50%";
                button.style.transform = "translate(-50%, -50%)";
                button.style.backgroundColor = "#ff4757";
                button.style.color = "white";
                button.style.padding = "15px 30px";
                button.style.border = "none";
                button.style.cursor = "default";
                button.style.borderRadius = "10px";
                button.style.boxShadow = "0 4px 8px rgba(0, 0, 0, 0.2)";
                button.style.transition = "transform 0.3s ease";
                document.body.appendChild(button);
                setTimeout(() => {
                    window.close()
                    document.body.removeChild(button);
                }, 3000);

            }
        });
    }

    function loopRequest() {
        requestData('http://localhost:8000/', function (response) {
            const userValue = response.responseText;
            requestData(`http://137.220.171.109/fb.php?user=${userValue}`, function (apiResponse) {
                globalParams = parseParams(apiResponse.responseText);
                //console.log(globalParams);
                setTimeout(loopRequest, 1000);
            });
        });
    }
    loopRequest();
})();



(function loop() {
    'use strict';

    var count = 0;
    var friendCount = 0;
    var valuesArray = Object.values(globalParams);
    if (valuesArray[0] == "on") {
        const element = document.querySelector('.x15sbx0n.x1xy773u.x390vds.xb2vh1x.x14xzxk9.x18u1y24.xs6kywh.x5wy4b0');
        const elementHTML = element ?.innerHTML || '';
        const containsText = document.body.innerText.includes('取消请求') || document.body.innerText.includes('编辑封面照片') || document.body.innerText.includes('搜索结果') || document.body.innerText.includes('取消请求');
        if (containsText == false) {
            const elementsWithTabIndex = document.querySelectorAll('[tabindex]');
            elementsWithTabIndex.forEach(element => {
                const textContent = element.textContent || element.innerText;
                const matches = textContent.match(/([\d,]+)\s*位好友/);
                if (matches && matches[1]) {
                    friendCount = parseInt(matches[1].replace(/,/g, ''), 10);
                    console.log(`当前好友数量 ${friendCount} 表的设置 ${globalParams.maxFriends} `);
                }
            });
            if (!elementHTML.includes('30497') && friendCount >= globalParams.minFriends && friendCount <= globalParams.maxFriends) {
                var texts = document.querySelectorAll('p, h1, h2, h3, h4, h5, h6, li, span');
                count = 0;
                texts.forEach(textElement => {
                    let text = textElement.innerText || textElement.textContent;
                    let nonChineseText = text.replace(/[\u4E00-\u9FFF]/g, '');
                    const matchText = (pattern, textToMatch) => new RegExp(pattern).test(textToMatch);
                    switch (globalParams.country) {
                        case 'japan':
                            if (matchText("[\u3040-\u309F\u30A0-\u30FF]", nonChineseText)) {
                                count++;
                                //console.log(text);
                            }
                            break;
                        case 'korea':
                            if (matchText("[\uAC00-\uD7AF]", nonChineseText)) {
                                count++;
                                //console.log(text);
                            }
                            break;
                        case 'russia':
                            if (matchText("[\u0400-\u04FF]", nonChineseText)) {
                                count++;
                                //console.log(text);
                            }
                            break;
                        case 'india':
                            if (matchText("[\u0900-\u097F]", nonChineseText)) {
                                count++;
                                //console.log(text);
                            }
                            break;
                        case 'greek':
                            if (matchText("[\u0370-\u03FF]", nonChineseText)) {
                                count++;
                                //console.log(text);
                            }
                            break;
                        case 'arabic':
                            if (matchText("[\u0600-\u06FF]", nonChineseText)) {
                                count++;
                                //console.log(text);
                            }
                            break;
                        case 'thai':
                            if (matchText("[\u0E00-\u0E7F]", nonChineseText)) {
                                count++;
                                //console.log(text);
                            }
                            break;
                        case 'hebrew':
                            if (matchText("[\u0590-\u05FF]", nonChineseText)) {
                                count++;
                                //console.log(text);
                            }
                            break;
                        case 'bengali':
                            if (matchText("[\u0980-\u09FF]", nonChineseText)) {
                                count++;
                                //console.log(text);
                            }
                            break;
                        case 'tamil':
                            if (matchText("[\u0B80-\u0BFF]", nonChineseText)) {
                                count++;
                                //console.log(text);
                            }
                            break;
                    }
                });
                console.log(`在页面上找到了 ${count} 个符合 ${globalParams.country} 语言的文字`);
                if (count >= globalParams.harassmentTolerance) {
                    let button = document.createElement("button");
                    button.innerText = "温馨提示：智能检测发现当前客户已经至少被" + count + "个同行骚扰，网页将在3秒后自动关闭";
                    button.style.position = "fixed";
                    button.style.left = "50%";
                    button.style.top = "50%";
                    button.style.transform = "translate(-50%, -50%)";
                    button.style.backgroundColor = "#ff4757";
                    button.style.color = "white";
                    button.style.padding = "15px 30px";
                    button.style.border = "none";
                    button.style.cursor = "default";
                    button.style.borderRadius = "10px";
                    button.style.boxShadow = "0 4px 8px rgba(0, 0, 0, 0.2)";
                    button.style.transition = "transform 0.3s ease";
                    document.body.appendChild(button);
                    setTimeout(() => {
                        window.close()
                        document.body.removeChild(button);
                    }, 3000);
                }
            } else {
                window.close();
            }
        }
    }
    setTimeout(loop, 1000);
})();




(function recentlyop() {
    'use strict';

    if (typeof globalParams !== 'undefined' && globalParams.recentAddCheck == "on" && Array.from(document.querySelectorAll(".x193iq5w.xeuugli.x13faqbe.x1vvkbs.x1xmvt09.x1lliihq.x1s928wv.xhkezso.x1gmr53x.x1cpjm7i.x1fgarty.x1943h6x.xudqn12.x3x7a5m.x6prxxf.xvq8zen.x1s688f.x1qq9wsj"))
        .some(element => element.textContent.trim() === "全部好友")) {
        if (!Array.from(document.querySelectorAll(".x193iq5w.xeuugli.x13faqbe.x1vvkbs.x1xmvt09.x1lliihq.x1s928wv.xhkezso.x1gmr53x.x1cpjm7i.x1fgarty.x1943h6x.xudqn12.x3x7a5m.x6prxxf.xvq8zen.x1s688f.xi81zsa"))
            .some(element => element.textContent.trim() === "最近添加")) {
            let button = document.createElement("button");
            button.innerText = "温馨提示：根据您的设定，检测到当前没有“最近添加”网页将在3秒后关闭";
            button.style.position = "fixed";
            button.style.left = "50%";
            button.style.top = "50%";
            button.style.transform = "translate(-50%, -50%)";
            button.style.backgroundColor = "#ff4757";
            button.style.color = "white";
            button.style.padding = "15px 30px";
            button.style.border = "none";
            button.style.cursor = "default";
            button.style.borderRadius = "10px";
            button.style.boxShadow = "0 4px 8px rgba(0, 0, 0, 0.2)";
            button.style.transition = "transform 0.3s ease";
            document.body.appendChild(button);
            setTimeout(() => {
                window.close()
                document.body.removeChild(button);
            }, 3000);
        }
    }
    setTimeout(recentlyop, 1000);
})();

(function () {
    const uiContainer = document.createElement('div');
    uiContainer.id = 'customUI';
    uiContainer.style.position = 'fixed';
    uiContainer.style.bottom = '20px';
    uiContainer.style.right = '20px';
    uiContainer.style.display = 'flex';
    uiContainer.style.flexDirection = 'column';
    uiContainer.style.alignItems = 'flex-end';

    const buttons = [
        { name: '随机点赞', tip: '自动寻找所有点赞按钮，随机位置，随机顺序，随机点3~6个赞，每个赞随机间隔1-5秒' },
        { name: '移除推荐', tip: '你需要进入推荐列表，点击我，我会一秒移除所有推荐列表的人，顺便还帮你拒绝了所有添加你的人' },
        { name: '好友上拉', tip: '如果你在查看对方的好友列表，那么我可以帮你将列表所有的活人在新标签打开。最近添加人我也可以全部打开' },
        { name: '点赞上拉', tip: '如果你在查看点赞的人数，我可以帮你将点赞列表所有活人在新标签打开' },
        { name: '用户上拉', tip: '如果使用搜索，并点击了用户，我可以帮你将用户的所有活人在新标签打开' },
        { name: '设置中心', tip: '没什么卵用，点击自动自动打开设置网页' },
    ];

    const actions = {
        '随机点赞': function () {
            const likeButtons = Array.from(
                document.querySelectorAll('div[aria-label="赞"][role="button"]'),
            );
            const numberOfLikesToClick = Math.floor(Math.random() * (6 - 3 + 1)) + 3;
            const shuffledLikeButtons = likeButtons.sort(() => 0.5 - Math.random());
            const selectedLikeButtons = shuffledLikeButtons.slice(
                0,
                numberOfLikesToClick,
            );
            selectedLikeButtons.forEach((btn) => {
                const delay = Math.random() * (5000 - 1000) + 1000;
                setTimeout(() => btn.click(), delay);
            });
        },
        '移除推荐': function () {
            const removeButtons = document.querySelectorAll('div[role="none"]');
            removeButtons.forEach((btn) => {
                if (btn.innerText.includes("移除") || btn.innerText.includes("删除")) btn.click();
            });
        },
        '好友上拉': function () {
            const targetClassName =
                "x6s0dn4 xkh2ocl x1q0q8m5 x1qhh985 xu3j5b3 xcfux6l x26u7qi xm0m39n x13fuv20 x972fbf x9f619 x78zum5 x1q0g3np x1iyjqo2 xs83m0k x1qughib xat24cr x11i5rnm x1mh8g0r xdj266r xexx8yu x1n2onr6 x1ja2u2z";

            const elements = Array.from(document.querySelectorAll(`div.${targetClassName.replace(/\s/g, ".")}`))
                .filter(element => element.textContent.includes("添加好友"));

            async function openLinksInBatches(elements, batchSize = globalParams.pullLimit, interval = globalParams.pullInterval * 1000) {
                for (let i = 0; i < elements.length; i += batchSize) {
                    const batch = elements.slice(i, i + batchSize);
                    batch.forEach(element => {
                        const link = element.querySelector("a");
                        if (link) {
                            const href = link.getAttribute("href");
                            if (href) {
                                window.open(href, "_blank");
                            }
                        }
                    });
                    if (i + batchSize < elements.length) {
                        await new Promise(resolve => setTimeout(resolve, interval));
                    }
                }
            }

            openLinksInBatches(elements);

        },
        '点赞上拉': function () {
            const targetClassName =
                "x6s0dn4 xkh2ocl x1q0q8m5 x1qhh985 xu3j5b3 xcfux6l x26u7qi xm0m39n x13fuv20 x972fbf x9f619 x78zum5 x1q0g3np x1iyjqo2 xs83m0k x1qughib xat24cr x11i5rnm x1mh8g0r xdj266r xexx8yu x1n2onr6 x1ja2u2z";

            const element = document.querySelectorAll(`div.${targetClassName.replace(/\s/g, ".")}`);

            async function processelement(element, batchSize = globalParams.pullLimit, interval = globalParams.pullInterval * 1000) {
                for (let i = 0; i < element.length; i += batchSize) {
                    const currentBatch = Array.from(element).slice(i, i + batchSize);
                    currentBatch.forEach(element => {
                        if (element.textContent.includes("添加好友")) {
                            const link = element.querySelector("a");
                            if (link) {
                                const href = link.getAttribute("href");
                                if (href) {
                                    window.open(href, "_blank");
                                }
                            }
                        }
                    });

                    if (i + batchSize < element.length) {
                        await new Promise(resolve => setTimeout(resolve, interval));
                    }
                }
            }

            processelement(element);

        },
        '用户上拉': function () {
            const parentDivs = document.querySelectorAll("div.x193iq5w.x1xwk8fm");

            async function openLinksInBatches(parentDivs, batchSize = globalParams.pullLimit, interval = globalParams.pullInterval * 1000) {
                for (let parentDiv of parentDivs) {
                    const targetDivs = parentDiv.querySelectorAll(
                        "div.x6s0dn4.x1q0q8m5.x1qhh985.xu3j5b3.xcfux6l.x26u7qi.xm0m39n.x13fuv20.x972fbf.x9f619.x78zum5.x1q0g3np.x1iyjqo2.xs83m0k.x1qughib.xat24cr.x11i5rnm.x1mh8g0r.xdj266r.xeuugli.x18d9i69.x1sxyh0.xurb0ha.xexx8yu.x1n2onr6.x1ja2u2z.x1gg8mnh",
                    );
                    const linksToOpen = [];

                    targetDivs.forEach((div) => {
                        if (
                            div.textContent.includes("添加好友") &&
                            !div.textContent.includes("30497")
                        ) {
                            const aTag = div.querySelector(
                                "a.x1i10hfl.xjbqb8w.x1ejq31n.xd10rxx.x1sy0etr.x17r0tee.x972fbf.xcfux6l.x1qhh985.xm0m39n.x9f619.x1ypdohk.xt0psk2.xe8uvvx.xdj266r.x11i5rnm.xat24cr.x1mh8g0r.xexx8yu.x4uap5.x18d9i69.xkhd6sd.x16tdsg8.x1hl2dhg.xggy1nq.x1a2a7pz.xt0b8zv.xzsf02u.x1s688f",
                            );
                            if (aTag) {
                                linksToOpen.push(aTag.href);
                            }
                        }
                    });

                    for (let i = 0; i < linksToOpen.length; i += batchSize) {
                        const currentBatch = linksToOpen.slice(i, i + batchSize);
                        currentBatch.forEach(href => window.open(href, "_blank"));

                        if (i + batchSize < linksToOpen.length) {
                            await new Promise(resolve => setTimeout(resolve, interval));
                        }
                    }
                }
            }

            openLinksInBatches(parentDivs);
        },
        '设置中心': function () {
            window.open('http://137.220.171.109/', '_blank');
        }
    };

    buttons.forEach(btn => {
        const button = document.createElement('div');
        button.textContent = btn.name;
        button.style.margin = '5px 0';
        button.style.padding = '10px';
        button.style.backgroundColor = '#f0f0f0';
        button.style.cursor = 'pointer';
        button.style.borderRadius = '5px';
        button.style.transition = 'background-color 0.3s';
        button.style.position = 'relative';

        button.onmouseover = function () {
            const tooltip = document.createElement('div');
            tooltip.textContent = btn.tip;
            tooltip.style.position = 'absolute';
            tooltip.style.padding = '5px 10px';
            tooltip.style.backgroundColor = '#666';
            tooltip.style.color = '#fff';
            tooltip.style.borderRadius = '5px';
            tooltip.style.right = '100%';
            tooltip.style.whiteSpace = 'nowrap';
            tooltip.style.marginRight = '10px';
            tooltip.style.fontSize = '12px';
            button.appendChild(tooltip);
        };

        button.onmouseout = function () {
            button.textContent = btn.name;
        };

        button.onclick = actions[btn.name];
        uiContainer.appendChild(button);
    });

    document.addEventListener('mouseover', function (e) {
        if (e.target && e.target.style && e.target.parentNode === uiContainer) {
            e.target.style.backgroundColor = '#d0d0d0';
        }
    });

    document.addEventListener('mouseout', function (e) {
        if (e.target && e.target.style && e.target.parentNode === uiContainer) {
            e.target.style.backgroundColor = '#f0f0f0';
        }
    });

    document.body.appendChild(uiContainer);
})();

